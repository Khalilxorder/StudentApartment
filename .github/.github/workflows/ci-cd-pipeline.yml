name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20.11.0'
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}

jobs:
  # Job 1: Code Quality & Validation
  quality-check:
    name: Code Quality & Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Check formatting
        run: npm run format:check || true

  # Job 2: Unit & Integration Tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quality-check

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: student_apartments_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: npm run db:setup:test
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/student_apartments_test

      - name: Run unit tests
        run: npm run test:unit -- --run

      - name: Run integration tests
        run: npm run test:integration -- --run
        timeout-minutes: 10

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/coverage-final.json
          flags: unittests
          fail_ci_if_error: true

  # Job 3: Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quality-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        timeout-minutes: 15

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: .next
          retention-days: 1

  # Job 4: Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --production --audit-level=moderate
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: SARIF upload
        uses: github/codeql-action/upload-sarif@v2
        continue-on-error: true

  # Job 5: E2E Tests (on PR)
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [quality-check, build]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run e2e
        timeout-minutes: 20

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: test-results/
          retention-days: 7

  # Job 6: Deploy to Staging (on PR)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [quality-check, test, build, security]
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    environment:
      name: staging
      url: https://staging.studentapartments.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: .next

      - name: Deploy to Vercel (Staging)
        run: npx vercel deploy --token ${{ env.VERCEL_TOKEN }} --prebuilt
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_STAGING }}

      - name: Run staging health checks
        run: |
          node scripts/health-check.js --environment staging --max-retries 5
        timeout-minutes: 5

      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'âœ… Staging deployment successful! View at https://staging.studentapartments.com'
            })

  # Job 7: Deploy to Production (on main merge)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 40
    needs: [quality-check, test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://studentapartments.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run database migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        timeout-minutes: 10

      - name: Build embeddings
        run: npm run build:embeddings
        timeout-minutes: 15
        continue-on-error: true

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: .next

      - name: Deploy to Vercel (Production)
        run: npx vercel deploy --token ${{ env.VERCEL_TOKEN }} --prod --prebuilt
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Run production health checks
        run: |
          node scripts/health-check.js --environment production --max-retries 10
        timeout-minutes: 10

      - name: Monitor error rates
        run: |
          echo "Monitoring error rates in Sentry..."
          # Integration with Sentry API to check for deployment regressions
        continue-on-error: true

      - name: Slack notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author

      - name: Create deployment record
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Automated deployment via CI/CD',
              auto_merge: false,
              required_contexts: []
            })

  # Job 8: Performance Benchmarks
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality-check, build]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: npm run test:performance
        timeout-minutes: 15

      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'customBiggerIsBetter'
          output-file-path: benchmark-results.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  # Job 9: Notify Deployment Status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [quality-check, test, build, security]
    if: always()

    steps:
      - name: Determine status
        id: status
        run: |
          if [ "${{ needs.quality-check.result }}" == "failure" ] || \
             [ "${{ needs.test.result }}" == "failure" ] || \
             [ "${{ needs.build.result }}" == "failure" ] || \
             [ "${{ needs.security.result }}" == "failure" ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Post status check
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ steps.status.outputs.status }}' === 'success' ? 'success' : 'failure';
            github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'CI/CD Pipeline',
              head_sha: context.sha,
              status: 'completed',
              conclusion: status,
              output: {
                title: `CI/CD Pipeline ${status.toUpperCase()}`,
                summary: 'All checks completed'
              }
            })
